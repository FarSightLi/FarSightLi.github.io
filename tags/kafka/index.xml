<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kafka on 骆灵上的个人网站</title><link>https://farsightli.github.io/tags/kafka/</link><description>Recent content in Kafka on 骆灵上的个人网站</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>骆灵上</copyright><lastBuildDate>Thu, 05 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://farsightli.github.io/tags/kafka/index.xml" rel="self" type="application/rss+xml"/><item><title>kafka基础架构理论</title><link>https://farsightli.github.io/p/kafka%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E7%90%86%E8%AE%BA/</link><pubDate>Thu, 05 Jun 2025 00:00:00 +0000</pubDate><guid>https://farsightli.github.io/p/kafka%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E7%90%86%E8%AE%BA/</guid><description>&lt;h2 id="kafka要解决的问题">Kafka要解决的问题：
&lt;/h2>&lt;p>原视频：&lt;/p>
&lt;p>【消息队列Kafka是什么？架构是怎么样的？5分钟快速入门】https://www.bilibili.com/video/BV1TT421y79S?vd_source=f2fbf19a95f21a30c8f56673d2b182b7&lt;/p>
&lt;p>消费者与生产者之间的生产速度和消费速度是不匹配的。如果生产的消息都往消费者塞，那么消费者很容易挂掉。那么我们可以把消息发往一个消息队列。消息队列可以起到 1削峰填谷 2.解耦 3.异步 等作用。但如果消息队列与消费者耦合，会有很多问题。于是需要把消息队列抽象出来，而Kafka就是消息队列的一种中间件。&lt;/p>
&lt;p>随着消费者和生产者的增加，消息的吞吐增加了。然而吞吐量到达一定程度，那么多个消费者/生产者就会共同争抢一个消息队列，会有等待时间。这样就出现了性能问题。那么这时候就可以增加消息队列，指定不同种类的消费者和生产者使用某一个消息队列&amp;ndash;这个就是topic。单个topic数据量过大时，那么就可以将单个topic拆开，这就是partition，然后每个消费者消费不同partition。&lt;/p>
&lt;p>如果多个partition都放在同一台机器上，则会对机器造成性能压力，那么可以将不同partition放在不同机器上，那么每个机器就是一个borker。&lt;/p>
&lt;p>如果broker的机器挂掉了，那么数据就全丢了。为了做到高可用性，往往将partition做备份即副本replicas。&lt;/p>
&lt;p>leader负责读写、follower负责同步leader。为了以防万一，往往还会对数据进行持久化。将数据写到磁盘上，然后根据某种策略清理磁盘&lt;/p>
&lt;h3 id="消费组-consumer-group相关概念">消费组 consumer group相关概念
&lt;/h3>&lt;p>消费组是为了解决：单个消费者消费速度跟不上生产者，那么就增加多个消费者组成消费组来共同消费某个topic。&lt;/p>
&lt;p>kafka控制了在一个消费组中，，同一 Partition 内的消息在同一个 Consumer Group 中只会被一个消费者实例处理。而不同消费组之间是可以独立的消费同一条消息。&lt;/p>
&lt;p>消费组订阅的是topic，订阅后，调度者coordinate就会将不同partition分配给不同消费者实例。调度员coordinate会在消费者增减、partition增减、消费组订阅新topic时进行重新分配rebalance。rebalance时group中的所有消费者会暂停消费至重新分配完毕&lt;/p>
&lt;h3 id="生产者的核心机制">生产者的核心机制
&lt;/h3>&lt;p>消息分发策略：生产者要指定topic，那么进入topic的消息应该去哪个partition？这有不同策略，比如轮询分配，比如按某个规则hash分配。&lt;/p>
&lt;p>ACK机制：可以不确认（acks=0）、leader确认（acks=1）、leader及follower确认（acks=all）&lt;/p>
&lt;p>acks=all时，还有一个参数min.insync.replicas即isr的副本大于等于这个参数时，就可以向生产者返回ack&lt;/p>
&lt;p>发送时，消息先放到发送缓冲区中，然后再攒批聚合发送&lt;/p>
&lt;h3 id="高水位线--high-watermark机制">高水位线 high watermark机制
&lt;/h3>&lt;p>hw标记了一个位置&amp;ndash;所有副本都已经同步的消息offset位置，消费者只能读取到小于hw的消息&lt;/p>
&lt;p>AI画的图：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Offset&lt;/th>
&lt;th>0&lt;/th>
&lt;th>1&lt;/th>
&lt;th>2&lt;/th>
&lt;th>3&lt;/th>
&lt;th>4&lt;/th>
&lt;th>5&lt;/th>
&lt;th>6&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>消息&lt;/td>
&lt;td>A&lt;/td>
&lt;td>B&lt;/td>
&lt;td>C&lt;/td>
&lt;td>D&lt;/td>
&lt;td>E&lt;/td>
&lt;td>F&lt;/td>
&lt;td>G&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>状态&lt;/td>
&lt;td>✅&lt;/td>
&lt;td>✅&lt;/td>
&lt;td>✅&lt;/td>
&lt;td>✅&lt;/td>
&lt;td>🚫&lt;/td>
&lt;td>🚫&lt;/td>
&lt;td>🚫&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> ↑
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> HW=4 (安全水位线)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此时当所有follower确认消息E持久化后，HW就会更新为5&lt;/p>
&lt;p>HW只由Leader进行更新维护，会由kafka的各种强制刷盘机制写到磁盘上&lt;/p>
&lt;p>疑问：&lt;/p>
&lt;p>1.为什么有topic和partition的概念，直接新增消息队列不就行了？&lt;/p>
&lt;p>topic是指Kafka将一些生产、消费的数据抽象出来，方便不同功能的生产者消费者操作消息。也就是起到分类功能。还可以使生产者消费者只关心如何收发数据，生产者不必额外设计标识使消费者正确消费。这是一种逻辑上的分区。&lt;/p>
&lt;p>而partition将topic分开，这种分区是一种物理上的分区。不同partition分布在不同broker或磁盘上，使减少读写io的冲突。此外，partition还提供了并发消费的能力。&lt;/p>
&lt;p>2.假如副本flower尚未拉取同步完leader的消息，lead挂掉了，此时选举出来的leader岂不是会丢消息？&lt;/p>
&lt;p>这是AI给的场景复现：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>初始状态&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Topic 分区 P0 有 3 个副本：Leader L1，Follower F2，Follower F3（ISR = [L1, F2, F3]）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>生产者发送消息 M1 到 L1，L1 将 M1 写入本地日志（但尚未同步给 Follower）&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>故障发生&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>L1 突然宕机（此时 M1 未同步给任何 Follower）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>系统需选举新 Leader（F2 或 F3）&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>风险
若选出的新 Leader 是 F2 或 F3，它们从未收到过 M1，导致 M1 永久丢失！&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>解决方案：1、ACK策略指定all 则只要生产者确认成功，那所有ISR都有数据，不会丢失&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>假如acks=1，那么在此场景中，&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Leader (L) 已写入消息 E (Offset=4)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>F1 同步了 E → ISR = [L, F1, F2]&lt;/p>
&lt;/li>
&lt;li>
&lt;p>F2 未同步 E（因网络延迟）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>此时 HW 仍为 4（因 F2 未确认，消息 E 不算安全）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>突发故障：Leader (L) 宕机！&lt;/p>
&lt;p>F1被选举为Leader，会进行检查，发现HW=4，则将消息E丢弃。而F2检查后不做处理（因为符合HW）。然后就是正常的同步数据流程&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="消费者的核心机制">消费者的核心机制
&lt;/h3>&lt;p>TODO&lt;/p>
&lt;h3 id="从代码看不同acks处理">从代码看不同acks处理
&lt;/h3>&lt;p>以下代码由AI提供，暂未验证是否准确&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// --------------------------&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// CASE 1: acks=0 (最高吞吐)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// --------------------------&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;acks&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 无需确认&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">producer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ProducerRecord&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;topic&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;key&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;value&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 特点：发送即忘，不处理响应（可能丢失）&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// --------------------------&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// CASE 2: acks=1 (平衡模式)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// --------------------------&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;acks&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// Leader 确认&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">producer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ProducerRecord&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;topic&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;key&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;value&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">metadata&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">!=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;发送失败&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 处理失败&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">debug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;发送成功: {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">metadata&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">offset&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 特点：处理Leader响应，网络异常可能重复&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// --------------------------&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// CASE 3: acks=all (高可靠)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// --------------------------&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;acks&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;all&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;min.insync.replicas&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 要求至少2个副本同步&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">producer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ProducerRecord&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;topic&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;key&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;value&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">metadata&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">!=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">instanceof&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">NotEnoughReplicasException&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// ISR副本不足时的特殊处理&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">retryOrFail&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 自定义重试逻辑&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 特点：严格一致性保障，需处理副本同步异常&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到，在acks=0的情况下，是没有回调方法的，所以也就拿不到元数据和异常信息（当然，offset=0时默认发送成功），而在acks=1或all的情况下，生产者是可以拿到发送成功后的offset等数据，假如发送失败也可以拿到拿到异常原因，但是发送异常后是否重发或其他逻辑，其实是生产者的代码自定义的，kafka对此并无要求？&lt;/p></description></item></channel></rss>