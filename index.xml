<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>骆灵上的个人网站</title><link>https://farsightli.github.io/</link><description>Recent content on 骆灵上的个人网站</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>骆灵上</copyright><lastBuildDate>Sun, 15 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://farsightli.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>五天速通go--搭建mini-grep(三)</title><link>https://farsightli.github.io/p/%E4%BA%94%E5%A4%A9%E9%80%9F%E9%80%9Ago--%E6%90%AD%E5%BB%BAmini-grep%E4%B8%89/</link><pubDate>Sun, 15 Jun 2025 00:00:00 +0000</pubDate><guid>https://farsightli.github.io/p/%E4%BA%94%E5%A4%A9%E9%80%9F%E9%80%9Ago--%E6%90%AD%E5%BB%BAmini-grep%E4%B8%89/</guid><description>前言 笔者有两年Java开发经验，目前需要临时用go语言开发一些功能，为了快速入手Go语言，在简单了解基础语法后，决定以实战来巩固知识。
参考了《Rust圣经》的思路，决定先开发一个模仿grep的工具，来快速巩固基础语法、Go项目管理。
为精简内容，本系列不包含环境搭建等基础部分（网上教程写的更清楚详细），直接讲解开发思路。希望能对后来者提供一些入门思路。
笔者整体思路：大致了解go语言的语法，了解某个工具的大致功能、实现方法。然后再辅以AI语法提示（仅仅告诉某个细节，比如如何读取参数等，而不是直接让ai实现功能）。这样便能快速入门一个不算复杂的语言。
PS：代码仓库: https://github.com/FarSightLi/minigrep
正文 流式读取初步实现 我们首先修改之前读取输入流和文件的方法：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 var input io.Reader // 从输入流中读取 filepath := cmdArgs.filepath if filepath == &amp;#34;&amp;#34; { input = os.Stdin } else { file, e := os.Open(filepath) if e != nil { if os.IsNotExist(err) { fmt.Printf(&amp;#34;找不到 %s 文件&amp;#34;, filepath) } if os.</description></item><item><title>五天速通go--搭建mini-grep(二)</title><link>https://farsightli.github.io/p/%E4%BA%94%E5%A4%A9%E9%80%9F%E9%80%9Ago--%E6%90%AD%E5%BB%BAmini-grep%E4%BA%8C/</link><pubDate>Sat, 07 Jun 2025 00:00:00 +0000</pubDate><guid>https://farsightli.github.io/p/%E4%BA%94%E5%A4%A9%E9%80%9F%E9%80%9Ago--%E6%90%AD%E5%BB%BAmini-grep%E4%BA%8C/</guid><description>前言 笔者有两年Java开发经验，目前需要临时用go语言开发一些功能，为了快速入手Go语言，在简单了解基础语法后，决定以实战来巩固知识。
参考了《Rust圣经》的思路，决定先开发一个模仿grep的工具，来快速巩固基础语法、Go项目管理。
为精简内容，本系列不包含环境搭建等基础部分（网上教程写的更清楚详细），直接讲解开发思路。希望能对后来者提供一些入门思路。
笔者整体思路：大致了解go语言的语法，了解某个工具的大致功能、实现方法。然后再辅以AI语法提示（仅仅告诉某个细节，比如如何读取参数等，而不是直接让ai实现功能）。这样便能快速入门一个不算复杂的语言。
PS：代码仓库: https://github.com/FarSightLi/minigrep
正文 功能拓展 在上一篇中，我们初步完成了一个及其简陋的grep程序，在这一节中，我们将逐步拓展功能。
在笔者日常工作中，-An(匹配列的下n行)， -an（匹配列的上下n行）、-Bn（匹配列的上n行）、-n（显示行号）、-i（忽略大小写）、-e（启用正则匹配）。在这篇中，我们就拓展这几种参数功能。
优化参数获取 在上一篇的原始版本中，我们使用这种 方式获得文件路径和搜索文本。这两个参数可以被视为”必须参数“（虽然filepath不一定必须，可以从输入流中获取，当然这是后话了）。而刚刚提到的诸如 -a等参数却可以使用任意个。所以我们通过从数组args的指定位置获取的方法就不适用了。这种参数称之为选项参数
1 2 filepath = args[1] searchText = args[2] 在golang中，选项参数可以用go的函数flag.CommandLine.Parse(args[1:])获取
使用方法如下：
1 2 3 4 5 // 选项参数用flag解析 isIgnoreCase := flag.Bool(&amp;#34;i&amp;#34;, false, &amp;#34;ignore case&amp;#34;) around := flag.Int(&amp;#34;a&amp;#34;, 0, &amp;#34;around line&amp;#34;) isIncludeLineNumber := flag.Bool(&amp;#34;n&amp;#34;, false, &amp;#34;include line number&amp;#34;) err := flag.CommandLine.Parse(args[1:]) 需要注意的是，flag.Int获得的是指针类型
args从1号位切片是因为0号位是我们的程序名
使用时，这些选项参数如这样使用：
1 go run main.go -i -a 2 -n #{文件路径} #{搜索内容} 结构体 虽然golang的方法可以拥有多个返回值，但是解析完的多个参数并不适合直接返回，可以用结构体包装后返回</description></item><item><title>kafka基础架构理论</title><link>https://farsightli.github.io/p/kafka%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E7%90%86%E8%AE%BA/</link><pubDate>Thu, 05 Jun 2025 00:00:00 +0000</pubDate><guid>https://farsightli.github.io/p/kafka%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E7%90%86%E8%AE%BA/</guid><description>Kafka要解决的问题： 原视频：
【消息队列Kafka是什么？架构是怎么样的？5分钟快速入门】https://www.bilibili.com/video/BV1TT421y79S?vd_source=f2fbf19a95f21a30c8f56673d2b182b7
消费者与生产者之间的生产速度和消费速度是不匹配的。如果生产的消息都往消费者塞，那么消费者很容易挂掉。那么我们可以把消息发往一个消息队列。消息队列可以起到 1削峰填谷 2.解耦 3.异步 等作用。但如果消息队列与消费者耦合，会有很多问题。于是需要把消息队列抽象出来，而Kafka就是消息队列的一种中间件。
随着消费者和生产者的增加，消息的吞吐增加了。然而吞吐量到达一定程度，那么多个消费者/生产者就会共同争抢一个消息队列，会有等待时间。这样就出现了性能问题。那么这时候就可以增加消息队列，指定不同种类的消费者和生产者使用某一个消息队列&amp;ndash;这个就是topic。单个topic数据量过大时，那么就可以将单个topic拆开，这就是partition，然后每个消费者消费不同partition。
如果多个partition都放在同一台机器上，则会对机器造成性能压力，那么可以将不同partition放在不同机器上，那么每个机器就是一个borker。
如果broker的机器挂掉了，那么数据就全丢了。为了做到高可用性，往往将partition做备份即副本replicas。
leader负责读写、follower负责同步leader。为了以防万一，往往还会对数据进行持久化。将数据写到磁盘上，然后根据某种策略清理磁盘
消费组 consumer group相关概念 消费组是为了解决：单个消费者消费速度跟不上生产者，那么就增加多个消费者组成消费组来共同消费某个topic。
kafka控制了在一个消费组中，，同一 Partition 内的消息在同一个 Consumer Group 中只会被一个消费者实例处理。而不同消费组之间是可以独立的消费同一条消息。
消费组订阅的是topic，订阅后，调度者coordinate就会将不同partition分配给不同消费者实例。调度员coordinate会在消费者增减、partition增减、消费组订阅新topic时进行重新分配rebalance。rebalance时group中的所有消费者会暂停消费至重新分配完毕
生产者的核心机制 消息分发策略：生产者要指定topic，那么进入topic的消息应该去哪个partition？这有不同策略，比如轮询分配，比如按某个规则hash分配。
ACK机制：可以不确认（acks=0）、leader确认（acks=1）、leader及follower确认（acks=all）
acks=all时，还有一个参数min.insync.replicas即isr的副本大于等于这个参数时，就可以向生产者返回ack
发送时，消息先放到发送缓冲区中，然后再攒批聚合发送
高水位线 high watermark机制 hw标记了一个位置&amp;ndash;所有副本都已经同步的消息offset位置，消费者只能读取到小于hw的消息
AI画的图：
Offset 0 1 2 3 4 5 6 消息 A B C D E F G 状态 ✅ ✅ ✅ ✅ 🚫 🚫 🚫 1 2 ↑ HW=4 (安全水位线) 此时当所有follower确认消息E持久化后，HW就会更新为5
HW只由Leader进行更新维护，会由kafka的各种强制刷盘机制写到磁盘上
疑问：
1.为什么有topic和partition的概念，直接新增消息队列不就行了？
topic是指Kafka将一些生产、消费的数据抽象出来，方便不同功能的生产者消费者操作消息。也就是起到分类功能。还可以使生产者消费者只关心如何收发数据，生产者不必额外设计标识使消费者正确消费。这是一种逻辑上的分区。
而partition将topic分开，这种分区是一种物理上的分区。不同partition分布在不同broker或磁盘上，使减少读写io的冲突。此外，partition还提供了并发消费的能力。
2.假如副本flower尚未拉取同步完leader的消息，lead挂掉了，此时选举出来的leader岂不是会丢消息？
这是AI给的场景复现：</description></item><item><title>操作系统（南京大学蒋炎炎）--个人学习笔记</title><link>https://farsightli.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8D%97%E4%BA%AC%E5%A4%A7%E5%AD%A6%E8%92%8B%E7%82%8E%E7%82%8E--%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid>https://farsightli.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8D%97%E4%BA%AC%E5%A4%A7%E5%AD%A6%E8%92%8B%E7%82%8E%E7%82%8E--%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>8 终端和进程组、unix shell 终端是从打字机、电报等演进而来的
现在的终端其实是pts-&amp;gt;伪终端pseudo terminal，作为一个中间层，连接了真正的终端和输入设备
不管是系统启动还是远程登陆，都会分配一个tty
终端只传输字符，不管ctrl+c还是d&amp;hellip;.（都代表不同的控制信号），都发给操作系统
ctrl+z退出程序，放在后台跑，相当于最小化。而jobs可以查看所有运行中的后台程序， fg %#{id} 即可恢复
操作系统维护了终端与对应的运行程序group的关系。每个进程都有一个sessionid，关联了终端。还有一个小分组，process group id，只有一个前台进程组，ctrl+c时关闭所有前台进程组。
这里讨论了：这是一种遗留的历史问题，可以设计的更简洁，只需要保留进程组就行。还有Android的实现机制
13 多线程编程入门 &amp;hellip;spawn后，共享内存不变，新增新的栈帧
并发vs并行
证明了全局变量是共享的、证明栈的大小（不断递归使用栈空间）
多线程打破了确定性 -&amp;gt; 经典的并发支付、并发sum++
一个小题目：并发执行三个sum. ,sum的最小值
t1 t2 t3 t = 0，正常执行++和store，则sum=2 t=0, t+=1,t=1 t=0, t+=1,t=1 再加一次并store，则sum=2 store， sum = 1 store, sum =1 此时load出sum =1（被另外两个线程覆盖了） load后，t=1，再++ load后，t=1，再++ 正常store，再load，再+1，再正常store后，sum=3 正常store，再load，再+1，再正常store后，sum=3 再进行++，t=2，再load，于是sum最终为2 编译器会优化程序 编译器假设，没有什么会随意更改程序状态，那么只要优化前后的程序，在程序调用层面上等价，那么语句其实是可以随意调换删除的
那么编写程序时，大部分时候希望编译器优化的，毕竟需要性能，那么有两个不推荐的路子：1.插入不可优化的代码块。2.使用volatile关键字
况且内存也不是真的sharded的，由于物理上的距离、读写的速度，A线程上的内存和B线程上的内存是很有可能不一致的（因为为了保证快，操作系统读取时，是立马返回的，而不是像其他内存块确认是否有修改）
27 虚拟机、容器、微服务 一开始，是Full System Emulation，写一个程序，模拟整个操作系统。有致命缺陷：性能非常慢
实际上，我们的应用大部分都不在内核上运行。所以可以将虚拟机的用户态部分直接放到宿主机上运行（将物理页映射到虚拟页），只有涉及到系统调用时，才放到虚拟机中执行。而发展到今天，cpu已经自支持虚拟化了，虚拟机和宿主机用的不同页表，syscall直接运行在虚拟页表上。
虚拟机可以保存系统状态，一旦保存，可以做时空转换。虚拟机的初始状态是确定的，是一个初始状态的虚拟机，可以将所有状态转换都记录下来
然而，没必要用一个模拟程序来模拟操作系统，操作系统可以自己虚拟化自己。加一个osid，即可区分不同进程树（一个进程可以fork另外一棵进程树）。这就是linux的namespaces，有一些东西需要区分，如mnt、pid、cgroup、net、user、time、ipc、time等。cgroup控制了不同namespaces的资源上限
这其实也就是容器，开销更小，只是容器安全性略低
甚至可以更进一步，连容器概念都不要了：serverless，function as a service。直接将函数放在云上。</description></item><item><title>五天速通go(一)--搭建mini-grep</title><link>https://farsightli.github.io/p/%E4%BA%94%E5%A4%A9%E9%80%9F%E9%80%9Ago%E4%B8%80--%E6%90%AD%E5%BB%BAmini-grep/</link><pubDate>Thu, 01 May 2025 00:00:00 +0000</pubDate><guid>https://farsightli.github.io/p/%E4%BA%94%E5%A4%A9%E9%80%9F%E9%80%9Ago%E4%B8%80--%E6%90%AD%E5%BB%BAmini-grep/</guid><description>前言 笔者有两年Java开发经验，目前需要临时用go语言开发一些功能，为了快速入手Go语言，在简单了解基础语法后，决定以实战来巩固知识。
参考了《Rust圣经》的思路，决定先开发一个模仿grep的工具，来快速巩固基础语法、Go项目管理。
为精简内容，本系列不包含环境搭建等基础部分（网上教程写的更清楚详细），直接讲解开发思路。希望能对后来者提供一些入门思路。
笔者整体思路：大致了解go语言的语法，了解某个工具的大致功能、实现方法。然后再辅以AI语法提示（仅仅告诉某个细节，比如如何读取参数等，而不是直接让ai实现功能）。这样便能快速入门一个不算复杂的语言。
PS：代码仓库: GitHub - FarSightLi/minigrep
grep命令简介 grep是一个最初用于Unix操作系统的命令行工具。在给出文件列表或标准输入后，grep会对匹配一个或多个正则表达式的文本进行搜索，并只输出匹配（或者不匹配）的行或文本。
&amp;ndash; wiki百科
grep的一个经典用法是：
1 grep /data/test.txt searchContent 其中，/data/test.txt 是要搜索的文件列表， searchContent是我们要搜索的内容。这是一种最基本的功能。
搭建基本框架 我们的minigrep至少要先能获取到用户的目标 :文件列表及搜索内容 &amp;ndash; 即参数列表。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; ) func main() { // 读取参数列表 args := os.Args // 文件路径 filepath := args[1] // 搜索内容 searchText := args[2] content, e := os.</description></item><item><title>计算机网络(中科大郑烇)--个人学习笔记</title><link>https://farsightli.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%A7%91%E5%A4%A7%E9%83%91%E7%83%87--%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Thu, 01 May 2025 00:00:00 +0000</pubDate><guid>https://farsightli.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%A7%91%E5%A4%A7%E9%83%91%E7%83%87--%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>2 应用层 2.1 Web和Http 对http这一套还是非常了解的了。 这节课大致说了请求头、建立连接过程、Cookie等 这是一些之前没注意的细节： http1.0只有POST和GET，Http1.1有PUT、DELETE 后面还讲了一些服务器缓存，涉及到了一个场景的性能提升计算，过于细节没有特别关注。 介绍了缓存的机制（根据时间来判断是否拉新的，状态码304、200）
2.2 FTP 大概介绍了一下，客户端先和服务断建立控制连接，用于账号密码校验、控制切换目录等，之后再建立数据连接，用于文件传输
2.3 2.7 TCP套接字编程 主要说了api实现
服务端：1.创建welcome socket，2绑定了本地端口、ip；3.accept等待客户端连接
客户端：1.创建socket（操作系统默认隐式绑定本地ip端口）2.connect连接服务端，绑定服务端ip端口
服务端：收到建立请求后，就会再建一个新的socket来绑定本地、对方ip端口
之后就是客户端wirte、服务端read，服务端write，客户端read
之后就是close
3.1 Ip协议是主机和主机之间的通信
TCP、UDP是进程和进程之间的通信
TCP传输的是数据流，没有数据边界；UDP传输的是数据报datagram，每个消息都是独立完整的数据报
TCP在ip基础上增强了以下能力：更可靠、拥塞流量控制、而UDP则没有在ip基础上提升能力（TCP、UDP都做了多路复用解复用） 但是他们都不能提升带宽、降低延迟
3.2多路复用、解复用 他们如何在进程中通信？TCP（携带的socket包含了原ip目标ip，原port、目标port）会携带原port、目标port；ip会携带原ip、目标ip，因此当对方收到tcp segment后，自然能通过这四个信息去查到对应的socket和pid；而UDP只携带了socket（原ip、原port）和cad（对方ip、对方prot）；除此之外，当然他们都携带了数据msg
3.3 无连接UDP UDP （user datagram protocol）因为只在发送、接受时进行了简单的校验运算，所以传输速度很快，没有提供其他高级特性
为什么UDP 的差错校验机制使用了这样一个复杂的机制？
假设采用一种更简单的方式：发送端将所有数据每16位进行补和运算，将结果放在一个新的数据段中（假设叫校验码），然后接收端再同样将所有数据每16位进行补和运算，如果结果等于校验，则表明没有出错。这样的方案明显是不充足的，容易引起误判 为什么将数据部分每16位进行补和运算（采用进位回滚的相加并取反），然后与校验码进行相加，一定会等于FFFF？
将数据部分每16位进行补和运算（采用进位回滚的相加并取反），然后与校验码进行相加，如果等于FFFF就没有出错？
因为校验码是
因为这样可以最大化保证校验是有效且快速的？
3.4可靠数据传输RDP RDP ：reliable datagram protocol
RDP1.0： 这是一种协议假设，假设消息既不丢失也不出错，这样只需要发送方不停发送消息，接收方不停接受消息即可
RDP2.0 假设此协议下，消息会发生错误，因此需要协议解决错误
不出错情况下：消息发送方发送消息，接收方收到消息后，通过校验，发现消息未出错，则返回ack
出错了：接收方返回nack，则发送方再次发送消息1
RDP2.1 发送的消息会出错，返回的消息也同样会出错
假如发送方收到了接收方返回的出错的消息（即无法识别的消息），则默认是nack，即默认发送出错，再次发送0号消息，接受方接受以后，返回ack0，发送方就继续发送msg1。如果实际上没有出错，则接收方丢弃此次消息即可
RDP2.2 对2.1进行小优化，不发送NACK了，如果出错，返回上一条消息的ACK，比如1号消息出错，返回ACK0
RDP3.0 此协议下，消息会丢失
因此引入超时重发机制，假如发送消息后一段时间后，没有返回ack，则说明消息丢失，再次发送即可，假如实际没丢失，只是高延迟，则接收方收到消息丢弃即可
3.5TCP 报文结构 ip、端口、序号、确认号（序号和确认号都值得是上层下来的数据的数据偏移量）、一些不常用的标志位、以及body
由于是全双工，所以返回ack的时候用到了确认号，空余量（用于流量控制），同时也有需要返回的真正的数据
如何控制超时重传？
发送第一段数据后启动timer，记录返回时间。通过计算类似于平均值与四倍方差的时间来动态计算超时时间。</description></item><item><title>Archives</title><link>https://farsightli.github.io/archives/</link><pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate><guid>https://farsightli.github.io/archives/</guid><description/></item><item><title>About</title><link>https://farsightli.github.io/about/</link><pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate><guid>https://farsightli.github.io/about/</guid><description>Written in Go, Hugo is an open source static site generator available under the Apache License 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.
Hugo makes use of a variety of open source projects including:
https://github.com/yuin/goldmark https://github.</description></item><item><title>Links</title><link>https://farsightli.github.io/links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://farsightli.github.io/links/</guid><description>To use this feature, add links section to frontmatter.
This page&amp;rsquo;s frontmatter:
1 2 3 4 5 6 7 8 9 links: - title: GitHub description: GitHub is the world&amp;#39;s largest software development platform. website: https://github.com image: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png - title: TypeScript description: TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. website: https://www.typescriptlang.org image: ts-logo-128.jpg image field accepts both local and external images.</description></item><item><title>Search</title><link>https://farsightli.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://farsightli.github.io/search/</guid><description/></item></channel></rss>