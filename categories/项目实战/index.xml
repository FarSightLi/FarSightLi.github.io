<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>项目实战 on 骆灵上的个人网站</title><link>https://farsightli.github.io/categories/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/</link><description>Recent content in 项目实战 on 骆灵上的个人网站</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>骆灵上</copyright><lastBuildDate>Sun, 15 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://farsightli.github.io/categories/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/index.xml" rel="self" type="application/rss+xml"/><item><title>五天速通go--搭建mini-grep(三)</title><link>https://farsightli.github.io/p/%E4%BA%94%E5%A4%A9%E9%80%9F%E9%80%9Ago--%E6%90%AD%E5%BB%BAmini-grep%E4%B8%89/</link><pubDate>Sun, 15 Jun 2025 00:00:00 +0000</pubDate><guid>https://farsightli.github.io/p/%E4%BA%94%E5%A4%A9%E9%80%9F%E9%80%9Ago--%E6%90%AD%E5%BB%BAmini-grep%E4%B8%89/</guid><description>前言 笔者有两年Java开发经验，目前需要临时用go语言开发一些功能，为了快速入手Go语言，在简单了解基础语法后，决定以实战来巩固知识。
参考了《Rust圣经》的思路，决定先开发一个模仿grep的工具，来快速巩固基础语法、Go项目管理。
为精简内容，本系列不包含环境搭建等基础部分（网上教程写的更清楚详细），直接讲解开发思路。希望能对后来者提供一些入门思路。
笔者整体思路：大致了解go语言的语法，了解某个工具的大致功能、实现方法。然后再辅以AI语法提示（仅仅告诉某个细节，比如如何读取参数等，而不是直接让ai实现功能）。这样便能快速入门一个不算复杂的语言。
PS：代码仓库: https://github.com/FarSightLi/minigrep
正文 流式读取初步实现 我们首先修改之前读取输入流和文件的方法：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 var input io.Reader // 从输入流中读取 filepath := cmdArgs.filepath if filepath == &amp;#34;&amp;#34; { input = os.Stdin } else { file, e := os.Open(filepath) if e != nil { if os.IsNotExist(err) { fmt.Printf(&amp;#34;找不到 %s 文件&amp;#34;, filepath) } if os.</description></item><item><title>五天速通go--搭建mini-grep(二)</title><link>https://farsightli.github.io/p/%E4%BA%94%E5%A4%A9%E9%80%9F%E9%80%9Ago--%E6%90%AD%E5%BB%BAmini-grep%E4%BA%8C/</link><pubDate>Sat, 07 Jun 2025 00:00:00 +0000</pubDate><guid>https://farsightli.github.io/p/%E4%BA%94%E5%A4%A9%E9%80%9F%E9%80%9Ago--%E6%90%AD%E5%BB%BAmini-grep%E4%BA%8C/</guid><description>前言 笔者有两年Java开发经验，目前需要临时用go语言开发一些功能，为了快速入手Go语言，在简单了解基础语法后，决定以实战来巩固知识。
参考了《Rust圣经》的思路，决定先开发一个模仿grep的工具，来快速巩固基础语法、Go项目管理。
为精简内容，本系列不包含环境搭建等基础部分（网上教程写的更清楚详细），直接讲解开发思路。希望能对后来者提供一些入门思路。
笔者整体思路：大致了解go语言的语法，了解某个工具的大致功能、实现方法。然后再辅以AI语法提示（仅仅告诉某个细节，比如如何读取参数等，而不是直接让ai实现功能）。这样便能快速入门一个不算复杂的语言。
PS：代码仓库: https://github.com/FarSightLi/minigrep
正文 功能拓展 在上一篇中，我们初步完成了一个及其简陋的grep程序，在这一节中，我们将逐步拓展功能。
在笔者日常工作中，-An(匹配列的下n行)， -an（匹配列的上下n行）、-Bn（匹配列的上n行）、-n（显示行号）、-i（忽略大小写）、-e（启用正则匹配）。在这篇中，我们就拓展这几种参数功能。
优化参数获取 在上一篇的原始版本中，我们使用这种 方式获得文件路径和搜索文本。这两个参数可以被视为”必须参数“（虽然filepath不一定必须，可以从输入流中获取，当然这是后话了）。而刚刚提到的诸如 -a等参数却可以使用任意个。所以我们通过从数组args的指定位置获取的方法就不适用了。这种参数称之为选项参数
1 2 filepath = args[1] searchText = args[2] 在golang中，选项参数可以用go的函数flag.CommandLine.Parse(args[1:])获取
使用方法如下：
1 2 3 4 5 // 选项参数用flag解析 isIgnoreCase := flag.Bool(&amp;#34;i&amp;#34;, false, &amp;#34;ignore case&amp;#34;) around := flag.Int(&amp;#34;a&amp;#34;, 0, &amp;#34;around line&amp;#34;) isIncludeLineNumber := flag.Bool(&amp;#34;n&amp;#34;, false, &amp;#34;include line number&amp;#34;) err := flag.CommandLine.Parse(args[1:]) 需要注意的是，flag.Int获得的是指针类型
args从1号位切片是因为0号位是我们的程序名
使用时，这些选项参数如这样使用：
1 go run main.go -i -a 2 -n #{文件路径} #{搜索内容} 结构体 虽然golang的方法可以拥有多个返回值，但是解析完的多个参数并不适合直接返回，可以用结构体包装后返回</description></item><item><title>五天速通go(一)--搭建mini-grep</title><link>https://farsightli.github.io/p/%E4%BA%94%E5%A4%A9%E9%80%9F%E9%80%9Ago%E4%B8%80--%E6%90%AD%E5%BB%BAmini-grep/</link><pubDate>Thu, 01 May 2025 00:00:00 +0000</pubDate><guid>https://farsightli.github.io/p/%E4%BA%94%E5%A4%A9%E9%80%9F%E9%80%9Ago%E4%B8%80--%E6%90%AD%E5%BB%BAmini-grep/</guid><description>前言 笔者有两年Java开发经验，目前需要临时用go语言开发一些功能，为了快速入手Go语言，在简单了解基础语法后，决定以实战来巩固知识。
参考了《Rust圣经》的思路，决定先开发一个模仿grep的工具，来快速巩固基础语法、Go项目管理。
为精简内容，本系列不包含环境搭建等基础部分（网上教程写的更清楚详细），直接讲解开发思路。希望能对后来者提供一些入门思路。
笔者整体思路：大致了解go语言的语法，了解某个工具的大致功能、实现方法。然后再辅以AI语法提示（仅仅告诉某个细节，比如如何读取参数等，而不是直接让ai实现功能）。这样便能快速入门一个不算复杂的语言。
PS：代码仓库: GitHub - FarSightLi/minigrep
grep命令简介 grep是一个最初用于Unix操作系统的命令行工具。在给出文件列表或标准输入后，grep会对匹配一个或多个正则表达式的文本进行搜索，并只输出匹配（或者不匹配）的行或文本。
&amp;ndash; wiki百科
grep的一个经典用法是：
1 grep /data/test.txt searchContent 其中，/data/test.txt 是要搜索的文件列表， searchContent是我们要搜索的内容。这是一种最基本的功能。
搭建基本框架 我们的minigrep至少要先能获取到用户的目标 :文件列表及搜索内容 &amp;ndash; 即参数列表。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; ) func main() { // 读取参数列表 args := os.Args // 文件路径 filepath := args[1] // 搜索内容 searchText := args[2] content, e := os.</description></item></channel></rss>